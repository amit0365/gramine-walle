# Copyright (C) 2024 Gramine contributors
# SPDX-License-Identifier: BSD-3-Clause

# Node.js manifest file for Gramine

################################## GRAMINE ####################################

# Entrypoint binary which Gramine invokes
libos.entrypoint = "{{ nodejs_dir }}/node"

################################# ARGUMENTS ###################################

loader.log_level = "{{ log_level }}"
loader.insecure__use_cmdline_argv = true
loader.insecure__use_host_env = true

################################# ENV VARS ###################################

loader.env.LD_LIBRARY_PATH = "/lib:{{ arch_libdir }}:/usr/{{ arch_libdir }}"

################################# MOUNT FS ###################################

fs.mounts = [
    { path = "/lib", uri = "file:{{ gramine.runtimedir() }}" },
    { path = "{{ arch_libdir }}", uri = "file:{{ arch_libdir }}" },
    { path = "/usr/{{ arch_libdir }}", uri = "file:/usr/{{ arch_libdir }}" },
    { path = "{{ nodejs_dir }}/node", uri = "file:{{ nodejs_dir }}/node" },
{%- if nodejs_usr_share_dir %}
    { path = "{{ nodejs_usr_share_dir }}", uri = "file:{{ nodejs_usr_share_dir }}" },
{%- endif %}
    { path = "/walle", uri = "file:walle" }
]

############################### SGX: GENERAL ##################################

sgx.debug = true
sgx.enclave_size = "2G"
sgx.max_threads = {{ '1' if env.get('EDMM', '0') == '1' else '32' }}
sgx.edmm_enable = {{ 'true' if env.get('EDMM', '0') == '1' else 'false' }}
sgx.use_exinfo = {{ 'true' if env.get('EDMM', '0') == '1' else 'false' }}

############################# SGX: TRUSTED FILES ##############################

sgx.trusted_files = [
    "file:{{ nodejs_dir }}/node",
{%- if nodejs_usr_share_dir %}
    "file:{{ nodejs_usr_share_dir }}/",
{%- endif %}
    "file:{{ gramine.runtimedir() }}/",
    "file:{{ arch_libdir }}/",
    "file:/usr/{{ arch_libdir }}/",
    "file:walle/"
]

################################## SIGNALS ###################################

sys.enable_sigterm_injection = true

################################## ADDITIONAL FEATURES #############################

# Remote attestation support
loader.env.RA_TYPE = "dcap"
sgx.remote_attestation = "dcap"

# Encrypted storage
fs.mounts += [
    { type = "encrypted", path = "/data/", uri = "file:enclave_data/", key_name = "_sgx_mrenclave" }
]

# Temporary storage
fs.mounts += [
    { type = "tmpfs", path = "/tmp" }
]